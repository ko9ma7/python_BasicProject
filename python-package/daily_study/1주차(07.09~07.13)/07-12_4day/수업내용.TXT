[어제 명령어 복습]
	ls           
		-a
		-l
	cp
	mv
	mkdir
	rm 
		-rf
	cat 
		>
		>>
		문서 저장은 ctrl+D
	touch : 파일 만든다. 파일존재하면 그대로있고 시간만 바꿔준다
		--full-time
		-r
		-t
	head <-> tail                       파일내용 조금볼때
	more            한 장당 보여줄때
		파이프와 같이 사용
	date           현재 시간
	rdate         인터넷 시간 쓰기
		-p
		-s
	tzselect	       국가시간 맞추기
	file         파일종류 확인
	history
		-c
		-d
-------------------------------------------------------------------------
○ 수업 쪽지시험
1. /tmp내 test1 이라는 파일을 생성(cat이용)
2. test1 파일을 test2 복사
3. test2 파일을 최상위 디렉토리로 복사 (상대경로 이용)
4. test2 파일을 /bin 디렉토리로 복사 (절대경로 이용)
5. /bin안에 test2 파일 삭제(rm사용)

  138  cd /tmp
	  139  ls -al
	  140  pwd
  145  cat > test1
	  146  ls
  147  cp test1 test2
 	 148  ls -l
  149  cp ./test2 /
  	 150  cd
	  151  pwd
	  152  cd ..
	  153  ls -l
  154  cp test2 /bin
	  155  ls -l /bin
  156  rm /bin/test2
	  157  ls -l /bin
-------------------------------------------------------------------------

사용자변경 : "i2sec아이디 사용하다가 다른아이디 사용할때"
	(이때 사용하는것이 su 명령어)

crontab 지정된 시간에 특정프로그램을 자동 실행
at 일회용 시간예약해서 자동실행
find 찾는 명령어                (*는 여러글자 모를때           ?는 한글자씩)
	기준(파일의 소유자, 크기, 생성날짜, 최근 언제만들어졌는지)으로 검색 가능.
	+찾고나서 추가적인 기능도 사용을 같이할 수 있다.
	
	-name     파일이름과 일치하는것
	-perm  권한과 일치하는것
	-user 유저와 일치하는것  <->        -nouser
	-group   그룹과 일치하는것  <->        -nogroup
	-empty 비어있는 파일이나 디렉토리 검색
	-size      파일의 크기와 일치하는것
		-size +1024k 하면 이 이상인것을 찾는다
	-type 파일의 타입을 지정하여 검색
		  b : 블록 특수 파일(block device)
		  c : 캐릭터 특수 파일 (character deice)
		  d : 디렉토리(directory)
		  f : 일반파일(file)
		  l : 심볼릭 링크(link)
		  p : 파이프 (pipe)
		  s : 소켓 (socket)
	-print   찾은 파일들을 표준출력(stdout)으로 출력
	-exec command {} /;          파일이 검색됬을때, 검색 파일에 특정 명령수행할때 사용
		{}        검색된 파일들 의미(여러 파일이 검색될때 하나씩 치환되면서 해당 명령어실행됨)
		;        검색된 결과가 여러개인 경우 하나의 행에 여러 명령을 사용하기위함
		\             세미콜론이라는것을 알려주기 위함
			ex)ex) find . -name kkk* -exec rm {} \;  //kkk로 시작하는 파일을 검색하여 삭제(rm)함
	-newer file1 file2          `file1' 보다는 이후에 `file2' 보다는 이전에 생성되거나 변형된 파일들을 찾을 경우에 사용한다.
	-atime +n/-n/n : 최근 n일 이전에 액세스된 파일을 찾아준다.(accessed time)
	   +n : n일 또는 n일 이전에 액세스된 파일
	   -n : 오늘 부터 n일 전 사이에 액세스 된 파일
	    n : 정확히 n일 전에 액세스된 파일

	-ctime +n/-n/n : ctime은 파일의 퍼미션을 마지막으로 변경시킨 날짜를 의미한다. (changed time)
	   +n : n일 또는 n일 이전에 퍼미션이 변경된 파일
	   -n : 오늘 부터 n일 전 사이에 퍼미션이 변경된 파일
	    n :  정확히 n일 전에 퍼미션이 변경된 파일

	-mtime +n/-n/n : mtime은 파일내의 data를 마지막으로 변경한 날짜를 의미한다.(modified time) 
	    +n : n일 또는 n일 이전에 수정된 파일
	    -n : 오늘 부터 n일 전 사이에 수정된 파일
	      n : 정확히 n일 전에 수정된 파일

	-mount 현재의 파일 시스템과 동일한 타입의 파일 시스템에서만 검색을 할 경우에 사용한다.

ifconfig
	설명 시나리오
		1)인터넷설치할때, 공유기가 있다.
		2)공유기는 사실 라우터(route)이다.
		3)공유기에 A라는 PC를 연결했다.
		4)그럼 A라는 PC는 공유기를 거쳐 다른 컴퓨터를 찾아갈수 있게 된다.
		5)만약 네이버를 찾아간다고 가정해보자.
		6)이때는 네이버라는 곳의 주소가 필요하다. (이 주소를 ip주소라고 함)

	 	○ 인터넷 사용에 필요한 4가지(이 4가지를 공유기라는 라우터가 내 PC에 알려준다.)
			ip주소
			서브넷 마스크
			dns 서버 주소
			Gateway 주소  ( 출구 )
		- 게이트웨이
			A라는 PC는 공유기를 타고 나가야한다 (인터넷으로 나가는 문)
		- ip
			네이버에서 공유기가 아닌 A pc로 메일보낼떄 필요한 주소가 있다
		- 서브넷마스크
			인터넷상 ip주소는 '어느지역의 몇번 컴퓨터'이다 라고알려준다.(어느지역의 몇번 숫자)
		- dns서버
			ip를 검색하지 않고, 문자라는 주소로 바뀌주는 서비스를 하는 컴퓨터
			/etc/resolv.conf 라는 파일에 누가 DNS 서비스를 합니다라고 알려줌
	
		<ifconfig 출력의 설명>
			LAN Card             (우리컴터의 리눅스는 eth0 이라고함.)
				컴퓨터는 인터넷을 하기위한 장치
			inet addr    이것은 ip 이다.
			Mask   이것은 어디가 지역이름인가 표시해줌.
route 는  내가 연결된 공유기의 ip를 확인하는 명령어
shutdown명령어
tar은 용량줄이는것은 아니고 여러파일을 한번에 줄때 사용하는것
	압축 cfpz
	해제 zxvf

zip <-> unzip

grep         필터링을 하기위한 명령어
	grep Nobody cat /etc/passwd는 해당 글자 포함된 글자만 보여준다
	grep Nobody cat /etc/passwd -n  뽑는 문장이 몇번째 줄인지도 보임

********
[해킹] 내가 해킹한다음에 내 아이디로 남는 글자를 모두 검색할때 자주사용
○ root라는 글자를 리눅스에서 찾고싶다면?
	grep root /etc/* 라고 검색하자
********
######################################################
점심
######################################################
ls -l | grep nano
	nano라는 글자를 필터를 통해 리스트로 보여주겠다
ls -l | grep nano -c
	-c 옵션은 개수를 출력하는데, 이 개수는 몇줄인지를 보여준다.
grep nano /* -l
	-l 은 현재 파일의 nano라는것들이 어디 파일에 있는건지
grep ^root /etc/passwd
grep root$ /etc/passwd
	^ 시작 문자열 확인
	$ 종료 문자열 확인
	내가 지금 grep 뒤 글자를 적어주는게 시작하는 맨 앞줄을 찾고 싶다, 혹은 맨뒤

pipe 라는 것은 왼쪽은 화면에 보여지는 것인데, 왼쪽의 명령어를 오른쪽으로 넘겨서 사용.(단, 연관성필요)

/etc/stdin(0)        /etc/stdin(1)        /etc/stdin(2)
	!! 파일을 만들어서 글자를 담고 문자로 할거야
	!! 정상으로 뽑을 거야 
	!! 에러로 설정할거야

	명령어 > 파일이름                 (' 사실 > 앞에    숫자 1이 생략되어 있다') 
		//명령어라는걸 파일이름에 '1'입력을 한다.

	정상(1)       오류(2)
				->  1,2 숫자에 따라서 정상인지 오류가 모니터로 나타나는데, 꺽새라는 것(>)은 모니터가 아니라 컴퓨터안에 파일로 간다
-----------------------------------------------------------------------
	☆정리해보자
	◆ 명령어 > 파일이름

	정상 (1) / 오류(2) ->>>>>>>모니터

	->>>>>>>>>>>>>>>>>>>파일
-----------------------------------------------------------------------
	◆ 명령어 2> 파일이름

	정상 (1) / 오류(2) ->>>>>>>파일

	->>>>>>>>>>>>>>>>>>>모니터
-----------------------------------------------------------------------
abc > a              abc를 a에 넣어라 
abc 2> Z
★ 명령어의 결과는 무조건 모니터로 찾아가는게 맞다 (정상이든 아니든) 그런데 꺽새(>)는 모니터가 아니라 파일이라는 곳을 만들고 거기로 명령어를 보낸다.


dev/null에 보내면 남는게 없다


○ /etc/passwd     사용자 계정 정보의 저장소              -> 사용자 아이디와 관련정보가 있다
	ex)  Test : x : 500 : 500 : : /home/test : /bin/bash
	       (1)   (2)  (3)    (4)       (5)                (6)
			ex) root : x : 0 : 0 : root : /root : /bin/bash
			ex) hacker : : 0 : 0 : / : / : /bin/bash
(1) 사용자ID
(2) 패스워드       -> 나중에 문서편집해서 지우는 해킹도 가능 (x가 없으면 안적으면 비번안묻는다)
(3) UID        user ID        -> 아이디들 정리한 순서번호 인데 0번은 리눅스의 관리자
(4) GID        group ID
(5) 사용자 홈 디렉토리
(6) 시스템 로그인시 shell의 위치

○ /etc/shadow      암호화 된 사용자 정보           ->  사용중인 비밀번호들이 담겨있다
○ /etc/group 그룹 목록들에 대한 정보
○ /home 각 사용자만의 공간 디렉토리다.


[해킹] UID 숫자가 0번이면 관리자가 된다.

#######################################################
파이썬
#######################################################
자료형 복습

ord
chr
help
dir   다양한 속성 볼때
bin
hex
---------------------------------------------------------------------
메모리의 그 주소에 어떤값이 들어있다 보여줌.


substring : 하위문자열
문장을 담은 변수에 w[start:end:step] 으로 짤라서 출력해보았다.

w.index(' ')는 몇 번째 자리수인지

corder, decorder
	jpg, mpeg, png 와 같은 인코딩된 파일들은 특정 시그니쳐를 가지고 있는데, 우리가 배운 index와 같은 함수로 특정 시그니처를 찾으면 해당 파일이 어떤 확장자를 가지고 있는지 알 수가 있다

replace




list 내용 변경가능
str 변경불가
	














