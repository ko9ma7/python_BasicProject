★'capitalize', 
	(자본화하다) 첫번째 문장을 대문자로 만들고 나머지를 낮춘다 
	>>> b ='i am black' 	
	>>> b.capitalize() 'I am black' 'casefold', 
	(적당한) 소문자로 반환해준다 
	>>> b = 'I AM BLOACK' 
	>>> b.casefold() 
	'i am bloack'
★'center',O 
	문자 크기 문자열의 중앙에 원 문자열을 정렬한다 
	S.center(width[,fillchar]) width만큼 데이터를 고정적으로 만들때 fillchar문자를 채워넣는다 
★'count',O 
	문자가 포함된 개수를 반환. 
	s.count(sub, start=0, end=len(string) 문자열중에 sub 이 몇개있는지(범위 지정가능) 
'encode', 
	st.encode(하고싶은인코딩, 에러시에 핸들링스키마) 전송하는 정보를 바꾸거나, 특정 모듈에 인식하게 하는 인코딩이 필요할때 사용 
★'endswith', 
	aaa.endswith(suffix [, start [, end]]) 
	suffix라는 str이 슬라이스 안에 존재하면 참 
'expandtabs', 
★'find',O 
	문자의 첫 위치를 알아낸다(없으면 -1 반환해준다)  즉, index는 에러를 일으키면 프로그램 진행안되니 find사용
★'format', 
	변수 내용의 포멧을 맞춘 
★'format_map', 
	str에 1, 2, 3정보를 키로 가지게 데이터 저장. 

		str = {'a' =1,  'b' =2,  'c'=3}
		print str.format_map('a')    => 1

	필요한 데이터만 원하는 포멧에 맞추기가능 str{'x'=1, ...} 
	반환위치.format_map(str) 
	기존 포멧은 원하는 위치에 삽입만 하는 반면 이거는 매핑하는 방법과 유사 
★'index', 
	문자열안에 index를 통해 삽입한 데이터가 몇번째 위치하는지 반환됨 
★'isalnum', 
	모든 문자가 알파벳 혹은 숫이면 true 반환 공백이나 특수문자발견시 false 
★'isalpha', 
	모든 문자가 알파벳이면 true 반환 
'isascii', 
'isdecimal', 
	십진 정수이면 true 반환 
★'isdigit', 
	모든 문자가 0에서 9까지의 숫자이면 true 반 
'isidentifier', 
	문자열이 식별자의 조건에 맞다면 true 반환 
'islower', 
	모든 문자가 소문자이면 true 반환 
'isnumeric', 
	모두가 숫자면 참 
'isprintable', 
★'isspace', 
	공백으로만 되어 있는지? 그러면 참 (공백은 스페이스바 , 탭, 개행문자 포함)
'istitle', 
	
'isupper', 
	모든 문자가 대문자이면 True 반환 
★'join',O 
'ljust',O 
	문자 크기의 문자열의 왼쪽에 원 문자열을 정렬한다 
★'lower', 
	소문자로 된 문자열을 반환합니 
★'lstrip', 
'maketrans', 
★'partition', 
	칸막이, 분할
★'replace', 
	앞 올드문자를 뒤 문자로 교체해준 
'rfind', 
'rindex',
★'rjust',O 
	오른쪽 정렬함순데(특정 값을 넣으면, 그만큼 공백 유지해줌)
	문자열의 오른쪽에 원 문자열을 정 
	>>> "Hello".rjust(10)
	'     Hello'
'rpartition', 
'rsplit',
★'rstrip',
	오른쪽 공백을 지워준다.
★'split', 
	분할
	str.split(" # ") 
	매개변수인 #을 문장중에 찾으면 그 하위문자열로 분할한다 
'splitlines', 
★'startswith',O
	str.startswith('#')      -> #으로 시작하면 true 아니면 false
	비교해서 해당 시그니쳐면 진행 아니면 중단
★'strip', O
	문자 시작과 끝에 공백을 지우고, 매개변수값을 넣는다
★'swapcase', 
	소문자를 대문자로, 대문자를 소문자 
★'title', 
	모든 단어의 첫 문자만 대문자로 변 
'translate', 
	여러개의 문자열을 한꺼번에 바꿔준다
	어떤 문자는 어떤문자로 테이블로 만들어 치환해준다.
★'upper', 
	대문자로 바꿔준다 
★'zfill'
	ex)전화번호를 연속된 목록으로 만들어보고싶다
	ex) range(1,10000)
	>>> '1'.zfill(4)
	'0001'